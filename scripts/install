#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_add_secure_repos__3
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	ynh_clean_check_starting
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url="/"
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC
language=$YNH_APP_ARG_LANGUAGE
password=$YNH_APP_ARG_PASSWORD

name=$YNH_APP_ARG_NAME
secret=$(ynh_string_random 30)
admin_email=$(ynh_user_get_info $admin 'mail')

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_print_info "Validating installation parameters..."

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Register (book) web path
ynh_webpath_register $app $domain $path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_print_info "Storing installation settings..."

ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path_url
ynh_app_setting_set $app admin $admin
ynh_app_setting_set $app is_public $is_public
ynh_app_setting_set $app language $language
ynh_app_setting_set $app name $name
ynh_app_setting_set $app secret $secret
ynh_app_setting_set $app admin_email $admin_email

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_print_info "Configuring firewall..."

# Find a free port
port=$(ynh_find_port 8095)
ynh_app_setting_set $app port $port

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_print_info "Installing dependencies..."

ynh_install_app_dependencies $pkg_dependencies

ynh_install_nodejs 10

ynh_install_extra_app_dependencies --repo="deb https://dl.yarnpkg.com/debian/ stable main" --package="yarn" --key='https://dl.yarnpkg.com/debian/pubkey.gpg'

#=================================================
# INSTALL EXTRA DEPENDENCIES
#=================================================
ynh_print_info "Installing extra dependencies ..."

lsb_name="$(lsb_release --codename --short)"
ynh_install_extra_app_dependencies --repo="deb http://packages.erlang-solutions.com/debian $lsb_name contrib" --package="$extra_pkg_dependencies" --key='https://packages.erlang-solutions.com/debian/erlang_solutions.asc'

#=================================================
# CREATE A POSTGRESQL DATABASE
#=================================================
ynh_print_info "Creating a PostgreSQL database..."

db_name=$(ynh_sanitize_dbid $app)
db_user=$db_name
db_pwd=$(ynh_string_random 30)
ynh_app_setting_set "$app" db_name "$db_name"
ynh_app_setting_set "$app" db_pwd "$db_pwd"
ynh_psql_test_if_first_run
ynh_psql_create_user "$app" "$db_pwd"
ynh_psql_execute_as_root "CREATE DATABASE $db_name ENCODING 'UTF8' LC_COLLATE='C' LC_CTYPE='C' template=template0 OWNER $db_user;"
ynh_psql_execute_as_root "\connect $db_name 
create extension if not exists postgis;"
ynh_psql_execute_as_root "\connect $db_name 
CREATE EXTENSION IF NOT EXISTS pg_trgm;"
ynh_psql_execute_as_root "\connect $db_name 
CREATE EXTENSION IF NOT EXISTS unaccent;"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_print_info "Setting up source files..."

ynh_app_setting_set $app final_path $final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path/$app"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_print_info "Configuring nginx web server..."

### `ynh_add_nginx_config` will use the file conf/nginx.conf

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_print_info "Configuring system user..."

# Create a system user
ynh_system_user_create "$app" "$final_path"

#=================================================
# SPECIFIC SETUP
#=================================================
# MODIFY A CONFIG FILE
#=================================================

config="$final_path/$app/.env"
cp ../conf/.env "$config"

ynh_replace_string "__DOMAIN__"  "$domain"   "$config"
ynh_replace_string "__PORT__"  "$port"   "$config"
ynh_replace_string "__SECRET__"     "$secret"      "$config"
ynh_replace_string "__DB_NAME__" "$db_name"  "$config"
ynh_replace_string "__DB_USER__" "$db_user"  "$config"
ynh_replace_string "__DB_PWD__"  "$db_pwd"   "$config"
ynh_replace_string "__NAME__" "$name"  "$config"
ynh_replace_string "__ADMIN_EMAIL__" "$admin_email"  "$config"

#=================================================
# MAKE SETUP
#=================================================

# Temporarly bypass error : WARNING ** (ArgumentError) argument error and  System.get_env doesn't load environment variables

ynh_replace_string "__DOMAIN__"  "$domain"   "../conf/prod.exs"
ynh_replace_string "__PORT__"  "$port"   "../conf/prod.exs"
ynh_replace_string "__SECRET__"     "$secret"      "../conf/prod.exs"
ynh_replace_string "__DB_NAME__" "$db_name"  "../conf/prod.exs"
ynh_replace_string "__DB_USER__" "$db_user"  "../conf/prod.exs"
ynh_replace_string "__DB_PWD__"  "$db_pwd"   "../conf/prod.exs"
ynh_replace_string "__NAME__" "$name"  "../conf/prod.exs"
ynh_replace_string "__ADMIN_EMAIL__" "$admin_email"  "../conf/prod.exs"
cp ../conf/prod.exs "$final_path/$app/config/prod.exs"

# Temprary YARN fix for package material-design-icons 
cp ..conf/.yarnrc "$final_path/$app/.yarnrc"

# Give permission to the final_path
chown -R "$app":"$app" "$final_path"

pushd $final_path/$app/js
    ynh_use_nodejs    
    sudo -u $app env PATH=$PATH yarn install
    sudo -u $app env PATH=$PATH yarn run build
popd

pushd $final_path/$app
    source .env
    sudo -u "$app" MIX_ENV=prod mix local.hex --force
    sudo -u "$app" MIX_ENV=prod mix local.rebar --force
    sudo -u "$app" MIX_ENV=prod mix deps.get
    sudo -u "$app" MIX_ENV=prod mix ecto.migrate
    sudo -u "$app" MIX_ENV=prod mix phx.digest

    # Add user
    # sudo -u "$app" MIX_ENV=prod mix mobilizon.user new "$admin" "$admin_email" --password "$password" --moderator --admin -y

	#Generate key pair
    # sudo -u "$app" MIX_ENV=prod mix web_push.gen.keypair >> "config/prod.secret.exs"
	# ynh_replace_string "administrator@example.com" "$admin_email" "$final_path/$app/config/prod.secret.exs"
popd

curl http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz --output GeoLite2-City.tar.gz -s && tar zxf GeoLite2-City.tar.gz && mkdir -p /usr/share/GeoIP && mv GeoLite2-City_*/GeoLite2-City.mmdb $final_path/$app/priv/data/GeoLite2-City.mmdb

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_print_info "Configuring a systemd service..."

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================
ynh_print_info "Storing the config file checksum..."

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum "$config"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions to app files
chown -R "$app":"$app" "$final_path"

#=================================================
# ADVERTISE SERVICE IN ADMIN PANEL
#=================================================

# if using yunohost version 3.2 or more in the 'manifest.json', a description can be added
yunohost service add $app --description "$app daemon for Mobilizon"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_print_info "Configuring SSOwat..."

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway.
	ynh_app_setting_set $app unprotected_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_print_info "Reloading nginx web server..."

systemctl reload nginx

#=================================================
# START SERVICE
#=================================================

ynh_systemd_action --action=start --service_name=$app --log_path=systemd --line_match="Access MobilizonWeb.Endpoint at"

#=================================================
# END OF SCRIPT
#=================================================

ynh_print_info "Installation of $app completed"
