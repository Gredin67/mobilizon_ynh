#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_systemd_action
source ynh_add_secure_repos__3
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_print_info "Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get $app domain)
path_url=$(ynh_app_setting_get $app path)
admin=$(ynh_app_setting_get $app admin)
is_public=$(ynh_app_setting_get $app is_public)
final_path=$(ynh_app_setting_get $app final_path)
language=$(ynh_app_setting_get $app language)
db_name=$(ynh_app_setting_get $app db_name)
db_user=$db_name
db_pwd=$(ynh_app_setting_get "$app" db_pwd)
port=$(ynh_app_setting_get "$app" port)
secret=$(ynh_app_setting_get "$app" secret)
name=$(ynh_app_setting_get "$app" name)
admin_email=$(ynh_app_setting_get "$app" admin_email)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_print_info "Ensuring downward compatibility..."

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set $app is_public 1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set $app is_public 0
	is_public=0
fi

# If db_name doesn't exist, create it
if [ -z $db_name ]; then
	db_name=$(ynh_sanitize_dbid $app)
	ynh_app_setting_set $app db_name $db_name
fi

# If final_path doesn't exist, create it
if [ -z $final_path ]; then
	final_path=/var/www/$app
	ynh_app_setting_set $app final_path $final_path
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_print_info "Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
	ynh_clean_check_starting
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STOP SERVICE
#=================================================

ynh_systemd_action --action=stop --service_name=$app

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_print_info "Upgrading source files..."

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path/$app"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_print_info "Upgrading nginx web server configuration..."

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_print_info "Upgrading dependencies..."

ynh_install_app_dependencies $pkg_dependencies

ynh_install_nodejs 10

#=================================================
# INSTALL EXTRA DEPENDENCIES
#=================================================
ynh_print_info "Installing extra dependencies ..."

lsb_name="$(lsb_release --codename --short)"
ynh_install_extra_app_dependencies --repo="deb http://packages.erlang-solutions.com/debian $lsb_name contrib" --package="$extra_pkg_dependencies" --key='https://packages.erlang-solutions.com/debian/erlang_solutions.asc'

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_print_info "Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create "$app" "$final_path"

#=================================================
# SPECIFIC UPGRADE
#=================================================
# MODIFY A CONFIG FILE
#=================================================

config="$final_path/$app/.env"
cp ../conf/.env "$config"

ynh_replace_string "__DOMAIN__"  "$domain"   "$config"
ynh_replace_string "__PORT__"  "$port"   "$config"
ynh_replace_string "__SECRET__"     "$secret"      "$config"
ynh_replace_string "__DB_NAME__" "$db_name"  "$config"
ynh_replace_string "__DB_USER__" "$db_user"  "$config"
ynh_replace_string "__DB_PWD__"  "$db_pwd"   "$config"
ynh_replace_string "__NAME__" "$name"  "$config"
ynh_replace_string "__ADMIN_EMAIL__" "$admin_mail"  "$config"

#=================================================
# MAKE SETUP
#=================================================

# Temporarly bypass error : WARNING ** (ArgumentError) argument error and  System.get_env doesn't load environment variables

ynh_replace_string "__DOMAIN__"  "$domain"   "../conf/prod.exs"
ynh_replace_string "__PORT__"  "$port"   "../conf/prod.exs"
ynh_replace_string "__SECRET__"     "$secret"      "../conf/prod.exs"
ynh_replace_string "__DB_NAME__" "$db_name"  "../conf/prod.exs"
ynh_replace_string "__DB_USER__" "$db_user"  "../conf/prod.exs"
ynh_replace_string "__DB_PWD__"  "$db_pwd"   "../conf/prod.exs"
ynh_replace_string "__NAME__" "$name"  "../conf/prod.exs"
ynh_replace_string "__ADMIN_EMAIL__" "$admin_mail"  "../conf/prod.exs"
cp ../conf/prod.exs "$final_path/$app/config/prod.exs"

# Give permission to the final_path
chown -R "$app":"$app" "$final_path"

pushd $final_path/$app/js
    ynh_use_nodejs    
    sudo -u $app env PATH=$PATH npm install
    sudo -u $app env PATH=$PATH npm run build
popd

pushd $final_path/$app
    source .env
    sudo -u "$app" MIX_ENV=prod mix local.hex --force
    sudo -u "$app" MIX_ENV=prod mix local.rebar --force
    sudo -u "$app" MIX_ENV=prod mix deps.get
    sudo -u "$app" MIX_ENV=prod mix ecto.migrate
    sudo -u "$app" MIX_ENV=prod mix phx.digest

    # Add user
    # sudo -u "$app" MIX_ENV=prod mix mobilizon.user new "$admin" "$admin_email" --password "$password" --moderator --admin -y

	#Generate key pair
    # sudo -u "$app" MIX_ENV=prod mix web_push.gen.keypair >> "config/prod.secret.exs"
	# ynh_replace_string "administrator@example.com" "$admin_email" "$final_path/$app/config/prod.secret.exs"
popd

ynh_backup_if_checksum_is_different "$config"
# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum "$config"

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_print_info "Upgrading logrotate configuration..."

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_print_info "Upgrading systemd configuration..."

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
chown -R "$app":"$app" "$final_path"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_print_info "Upgrading SSOwat configuration..."

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway
	ynh_app_setting_set $app unprotected_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_print_info "Reloading nginx web server..."

systemctl reload nginx

#=================================================
# START SERVICE
#=================================================

ynh_systemd_action --action=start --service_name=$app --log_path=systemd
#--line_match="Running Pleroma.Web.Endpoint"

#=================================================
# END OF SCRIPT
#=================================================

ynh_print_info "Upgrade of $app completed"
